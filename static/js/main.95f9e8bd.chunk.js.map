{"version":3,"sources":["components/Buttons.js","components/ListRenderer.js","components/Starships.js","components/People.js","components/Planets.js","components/Home.js","components/NotFound.js","App.js","serviceWorker.js","index.js"],"names":["Buttons","props","react_default","a","createElement","Fragment","Button","content","icon","labelPosition","size","onClick","fnPrev","disabled","prev","style","margin","fnNext","next","ListRenderer","state","curr","handleRespond","link","fetch","then","resp","ok","json","Error","_ref","results","previous","_this","setState","catch","err","console","log","handlePrevButton","handleNextButton","this","name","components_Buttons","Card","Group","map","renderCard","Component","Starships","components_ListRenderer","starship","key","url","Content","Header","Meta","model","Description","manufacturer","People","person","height","birth_year","gender","Planet","planet","climate","gravity","terrain","Home","Container","fluid","as","NotFound","MenuLink","to","activeOnlyWhenExact","Route","path","exact","children","_ref2","match","Menu","Item","className","Link","App","BrowserRouter","App_MenuLink","Switch","component","Redirect","from","Boolean","window","location","hostname","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.95f9e8bd.chunk.js","sourcesContent":["import React from 'react';\nimport { Button } from 'semantic-ui-react';\n\nconst Buttons = props => (\n  <>\n    <Button\n      content=\"Prev\"\n      icon=\"left arrow\"\n      labelPosition=\"left\"\n      size=\"mini\"\n      onClick={() => props.fnPrev()}\n      disabled={props.prev !== null ? false : true}\n      style={{margin: \"10px 10px 10px 0px\"}}\n    />\n    <Button\n      content=\"Next\"\n      icon=\"right arrow\"\n      labelPosition=\"right\"\n      size=\"mini\"\n      onClick={() => props.fnNext()}\n      disabled={props.next !== null ? false : true}\n    />\n  </>\n);\n\nexport default Buttons;\n","import React, { Component } from 'react';\nimport Buttons from './Buttons';\nimport { Card } from 'semantic-ui-react';\n\nclass ListRenderer extends Component {\n  state = {\n    curr: null,\n    prev: null,\n    next: null,\n    content: []\n  };\n\n  handleRespond = link => {\n    if (link) {\n      fetch(link)\n        .then(resp => {\n          if (resp.ok) return resp.json();\n          else throw new Error('Błąd seci!');\n        })\n        .then(({ results, next, previous }) => {\n          this.setState({\n            content: results,\n            next: next,\n            prev: previous\n          });\n        })\n        .catch(err => {\n          console.log(err);\n        });\n    }\n    return;\n  };\n\n  componentDidMount() {\n    this.handleRespond(this.props.curr);\n  }\n\n  handlePrevButton = () => {\n    this.handleRespond(this.state.prev);\n  };\n\n  handleNextButton = () => {\n    this.handleRespond(this.state.next);\n  };\n\n  render() {\n    return (\n      <>\n        <h2>{this.props.name}</h2>\n        <Buttons\n          prev={this.state.prev}\n          next={this.state.next}\n          fnPrev={this.handlePrevButton}\n          fnNext={this.handleNextButton}\n        />\n\n        <Card.Group>{this.state.content.map(this.props.renderCard)}</Card.Group>\n      </>\n    );\n  }\n}\n\nexport default ListRenderer;\n","import React from 'react';\nimport ListRenderer from './ListRenderer';\nimport { Card } from 'semantic-ui-react';\n\nconst Starships = () => (\n  <ListRenderer\n    name=\"Starschips\"\n    curr=\"https://swapi.co/api/starships/\"\n    renderCard={starship => (\n      <Card key={starship.url}>\n        <Card.Content>\n          <Card.Header>{starship.name}</Card.Header>\n          <Card.Meta>{starship.model}</Card.Meta>\n          <Card.Description>{starship.manufacturer}</Card.Description>\n        </Card.Content>\n      </Card>\n    )}\n  />\n);\n\nexport default Starships;\n","import React from 'react';\nimport ListRenderer from './ListRenderer';\nimport { Card } from 'semantic-ui-react';\n\nconst People = () => (\n  <ListRenderer\n    name=\"People\"\n    curr=\"https://swapi.co/api/people/\"\n    renderCard={person => (\n      <Card key={person.url}>\n        <Card.Content>\n          <Card.Header>{person.name}</Card.Header>\n          <Card.Meta>{person.height}</Card.Meta>\n          <Card.Description>{person.birth_year}</Card.Description>\n          <Card.Description>{person.gender}</Card.Description>\n        </Card.Content>\n      </Card>\n    )}\n  />\n);\n\nexport default People;\n","import React from 'react';\nimport ListRenderer from './ListRenderer';\nimport { Card } from 'semantic-ui-react';\n\nconst Planet = () => (\n  <ListRenderer\n    name=\"Planets\"\n    curr=\"https://swapi.co/api/planets/\"\n    renderCard={planet => (\n      <Card key={planet.url}>\n        <Card.Content>\n          <Card.Header>{planet.name}</Card.Header>\n          <Card.Meta>{planet.climate}</Card.Meta>\n          <Card.Description>{planet.gravity}</Card.Description>\n          <Card.Description>{planet.terrain}</Card.Description>\n        </Card.Content>\n      </Card>\n    )}\n  />\n);\n\nexport default Planet;\n","import React from 'react';\nimport { Container, Header} from 'semantic-ui-react'\n\nconst Home = () => (\n  < >\n    <Container fluid >\n      <Header as='h2'>Home</Header>\n    </Container>\n\n  </>\n);\n\nexport default Home;\n","import React from 'react';\nimport { Container, Header } from 'semantic-ui-react'\n\nconst NotFound = () => (\n  <>\n    <Container fluid >\n      <Header as='h2'>404</Header>\n    </Container>\n\n  </>\n);\n    \n\n\nexport default NotFound;\n","import React from 'react';\nimport 'semantic-ui-css/semantic.min.css';\nimport Starships from './components/Starships.js';\nimport People from './components/People.js';\nimport Planet from './components/Planets.js';\nimport Home from './components/Home.js';\nimport NotFound from './components/NotFound.js';\nimport { BrowserRouter as Router, Route, Link, Switch, Redirect } from 'react-router-dom';\nimport { Menu } from 'semantic-ui-react';\n\nconst MenuLink = ({ name, to, activeOnlyWhenExact }) => (\n  <Route\n    path={to}\n    exact={activeOnlyWhenExact}\n    children={({ match }) => (\n      <Menu.Item className={match ? 'active' : ''}>\n        <Link to={to}>{name}</Link>\n      </Menu.Item>\n    )}\n  />\n);\n\nconst App = () => (\n  <>\n    <Router>\n      <div style={{ margin: \"10px\" }}>\n        <Menu >\n          <MenuLink activeOnlyWhenExact={true} name=\"Home\" as={Link} to=\"/\" />\n          <MenuLink name=\"Starschips\" as={Link} to=\"/starchips\" />\n          <MenuLink name=\"People\" as={Link} to=\"/people\" />\n          <MenuLink name=\"Planets\" as={Link} to=\"/planets\" />\n        </Menu>\n        <Switch>\n          <Route exact path=\"/\" component={Home} />\n          <Redirect from=\"/star-wars-app\" to=\"/\" />\n          <Route path=\"/starchips\" component={Starships} />\n          <Route path=\"/people\" component={People} />\n          <Route path=\"/planets\" component={Planet} />\n          <Route path=\"*\" component={NotFound} />\n        </Switch>\n      </div>\n    </Router>\n  </>\n);\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}